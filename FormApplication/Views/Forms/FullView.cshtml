@model FormApplication.Models.FullFormModel

@{
    ViewBag.Title = "FullView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>FullView</h2>

@using (Html.BeginForm("SaveAllEdits", "Forms", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4><b>You can now make your changes</b></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Fullname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fullname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Fullname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control dropdown " name="Gender" id="Gender">
                    @foreach (var item in ViewBag.gender)
                    {
                        if (Model.Gender == item.GenderType)
                        {
                            <option value="@item.GenderId" selected>@item.GenderType</option>
                        }
                        else
                        {
                            <option value="@item.GenderId">@item.GenderType</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HouseNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control dropdown " name="HouseNumber" id="HouseNumber" onchange="">
                    @foreach (var item in ViewBag.housebatch)
                    {
                        if (Model.HouseNumber == item.HouseUnit)
                        {
                            <option id="house_@item.HouseId" value="@item.HouseId" selected>@item.HouseUnit</option>
                        }
                        else
                        {
                            <option id="house_@item.HouseId" value="@item.HouseId">@item.HouseUnit</option>
                        }

                    }
                </select>
                @Html.ValidationMessageFor(model => model.HouseNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Profession, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Profession, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Profession, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control dropdown " name="Status" id="Status" onchange="">
                    @foreach (var item in ViewBag.status)
                    {
                        if (Model.Status == item.StatusType)
                        {
                            <option value="@item.StatusId" selected>@item.StatusType</option>
                        }
                        else
                        {
                            <option value="@item.StatusId">@item.StatusType</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            for (int i = 0; i < Model.SpouseModels.Count; i++)
            {
                <div hidden>
                    <input type="hidden" value="@Model.SpouseModels[i].SpouseId" name="SpouseId">
                </div>
                <div class="form-group" hidden>
                    <input type="hidden" value="@Model.SpouseModels[i].FormId" name="FormId">
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SpouseModels[i].Names, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.SpouseModels[i].Names, new { htmlAttributes = new { @class = "form-control" } })*@
                        <input class="form-control text-box single-line" id="Names" name="Names" type="text" value="@Model.SpouseModels[i].Names">
                        @Html.ValidationMessageFor(model => model.SpouseModels[i].Names, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SpouseModels[i].GenderType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="form-control dropdown " name="GenderType" id="GenderType">
                            @foreach (var item in ViewBag.gender)
                            {
                                if (Model.SpouseModels[i].GenderType == item.GenderType)
                                {
                                    <option value="@item.GenderId" selected>@item.GenderType</option>
                                }
                                else
                                {
                                    <option value="@item.GenderId">@item.GenderType</option>
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.SpouseModels[i].GenderType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SpouseModels[i].EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input class="form-control text-box single-line" id="EmailAddress" name="EmailAddress" type="text" value="@Model.SpouseModels[i].EmailAddress">
                        @*@Html.EditorFor(model => model.SpouseModels[i].EmailAddress, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.SpouseModels[i].EmailAddress, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.SpouseModels[i].Number, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input class="form-control text-box single-line" id="Number" name="Number" type="text" value="@Model.SpouseModels[i].Number">
                        @*@Html.EditorFor(model => model.SpouseModels[i].Number, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.SpouseModels[i].Number, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        }
        <div id="spouseinfo">

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button class="btn btn-default" onclick="addfields()" type="button"> Add Spouse</button>
                <button class="btn btn-danger" onclick="removefields()" type="button" style="display:none" id="removespouse"> Remove Spouse</button>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}



<script>
    var spouseinfo = document.querySelector('#spouseinfo');
    var removespouse = document.querySelector('#removespouse');
    var spousenumber = 1;

    function addfields()
    {
        var spouseinfohtml = document.createElement('div');
        spouseinfohtml.innerHTML = `
            <div>
        <p> Add a new Spouse</p>
    <input type="hidden" value="-1" name="NewSpouseId">

    
    <div class="form-group">
        <label class="control-label col-md-2" for="Names">Names</label>
        <div class="col-md-10">
            <input class="form-control text-box single-line" data-val="true" data-val-required="The Names field is required." id="SpouseName" name="SpouseName" type="text" value>
            <span class="field-validation-valid text-danger" data-valmsg-for="SpouseName" data-valmsg-replace="true"></span>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="SpouseGender">GenderType</label>
        <div class="col-md-10">
            <select class="form-control dropdown " name="SpouseGender" id="SpouseGender">
                <option value="1">Male</option>
                <option value="2">Female</option>
            </select>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="SpouseEmail">EmailAddress</label>
        <div class="col-md-10">
            <input class="form-control text-box single-line" data-val="true" data-val-email="The EmailAddress field is not a valid e-mail address." data-val-required="The EmailAddress field is required." id="SpouseEmail" name="SpouseEmail" type="email" value>
            <span class="field-validation-valid text-danger" data-valmsg-for="EmailAddress" data-valmsg-replace="true"></span>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="SpouseNumber">Number</label>
        <div class="col-md-10">
            <input class="form-control text-box single-line" data-val="true" data-val-required="The Number field is required." id="SpouseNumber" name="SpouseNumber" type="text" value>
           <span class="field-validation-valid text-danger" data-valmsg-for="SpouseNumber" data-valmsg-replace="true"></span>
        </div>
    </div>

</div>
        `

        spouseinfo.appendChild(spouseinfohtml);

        if (spouseinfo.childElementCount === 1) {
            removespouse.style.display = 'inline-block';
        }
        spousenumber++;
    }
    function removefields()
    {
        spouseinfo.removeChild(spouseinfo.lastElementChild);

        if (spouseinfo.childElementCount < 1) {
            removespouse.style.display = 'none';
        }
    }
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
